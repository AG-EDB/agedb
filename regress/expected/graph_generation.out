/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
LOAD 'age';
SET search_path = ag_catalog;
SELECT * FROM create_complete_graph('gp1',5,'edges','vertices');
NOTICE:  graph "gp1" has been created
NOTICE:  VLabel "vertices" has been created
NOTICE:  ELabel "edges" has been created
 create_complete_graph 
-----------------------
 
(1 row)

SELECT COUNT(*) FROM gp1."edges";
 count 
-------
    10
(1 row)

SELECT COUNT(*) FROM gp1."vertices";
 count 
-------
     5
(1 row)

SELECT * FROM cypher('gp1', $$MATCH (a)-[e]->(b) RETURN e$$) as (n agtype);
                                                             n                                                              
----------------------------------------------------------------------------------------------------------------------------
 {"id": 1125899906842625, "label": "edges", "end_id": 844424930131970, "start_id": 844424930131969, "properties": {}}::edge
 {"id": 1125899906842629, "label": "edges", "end_id": 844424930131971, "start_id": 844424930131970, "properties": {}}::edge
 {"id": 1125899906842626, "label": "edges", "end_id": 844424930131971, "start_id": 844424930131969, "properties": {}}::edge
 {"id": 1125899906842630, "label": "edges", "end_id": 844424930131972, "start_id": 844424930131970, "properties": {}}::edge
 {"id": 1125899906842627, "label": "edges", "end_id": 844424930131972, "start_id": 844424930131969, "properties": {}}::edge
 {"id": 1125899906842632, "label": "edges", "end_id": 844424930131972, "start_id": 844424930131971, "properties": {}}::edge
 {"id": 1125899906842631, "label": "edges", "end_id": 844424930131973, "start_id": 844424930131970, "properties": {}}::edge
 {"id": 1125899906842634, "label": "edges", "end_id": 844424930131973, "start_id": 844424930131972, "properties": {}}::edge
 {"id": 1125899906842633, "label": "edges", "end_id": 844424930131973, "start_id": 844424930131971, "properties": {}}::edge
 {"id": 1125899906842628, "label": "edges", "end_id": 844424930131973, "start_id": 844424930131969, "properties": {}}::edge
(10 rows)

SELECT * FROM create_complete_graph('gp1',5,'edges','vertices');
 create_complete_graph 
-----------------------
 
(1 row)

SELECT COUNT(*) FROM gp1."edges";
 count 
-------
    20
(1 row)

SELECT COUNT(*) FROM gp1."vertices";
 count 
-------
    10
(1 row)

SELECT * FROM create_complete_graph('gp2',5,'edges');
NOTICE:  graph "gp2" has been created
NOTICE:  ELabel "edges" has been created
 create_complete_graph 
-----------------------
 
(1 row)

SELECT * FROM create_complete_graph('gp3',5, NULL);
ERROR:  edge label can not be NULL
SELECT * FROM create_complete_graph('gp4',NULL,NULL);
ERROR:  number of nodes can not be NULL
SELECT * FROM create_complete_graph(NULL,NULL,NULL);
ERROR:  graph name can not be NULL
SELECT drop_graph('gp1', true);
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table gp1._ag_label_vertex
drop cascades to table gp1._ag_label_edge
drop cascades to table gp1.vertices
drop cascades to table gp1.edges
NOTICE:  graph "gp1" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT drop_graph('gp2', true);
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table gp2._ag_label_vertex
drop cascades to table gp2._ag_label_edge
drop cascades to table gp2.edges
NOTICE:  graph "gp2" has been dropped
 drop_graph 
------------
 
(1 row)

-- Tests for Erdos-Renyi graph generation.
-- G(n,p) model.
-- Unidirectional.
SELECT * FROM age_create_erdos_renyi_graph_gnp('ErdosRenyi_1', 6, 0, 'ERVertex', 'ER_EDGE', false); -- No edges are created.
NOTICE:  graph "ErdosRenyi_1" has been created
NOTICE:  VLabel "ERVertex" has been created
NOTICE:  ELabel "ER_EDGE" has been created
 age_create_erdos_renyi_graph_gnp 
----------------------------------
 
(1 row)

SELECT * FROM age_create_erdos_renyi_graph_gnp('ErdosRenyi_2', 6, 1, 'ERVertex', 'ERVertex', false); -- All edges are created.
NOTICE:  graph "ErdosRenyi_2" has been created
ERROR:  vertex and edge label can not be same
SELECT count(*) FROM "ErdosRenyi_1"."ER_EDGE"; -- No edges are created.
 count 
-------
     0
(1 row)

SELECT count(*) FROM "ErdosRenyi_2"."ER_EDGE"; -- All edges are created (15).
ERROR:  relation "ErdosRenyi_2.ER_EDGE" does not exist
LINE 1: SELECT count(*) FROM "ErdosRenyi_2"."ER_EDGE";
                             ^
-- Bidirectional.
SELECT * FROM age_create_erdos_renyi_graph_gnp('ErdosRenyi_3', 6, 1, 'ERVertex', 'ER_EDGE', true); -- All edges are created.
NOTICE:  graph "ErdosRenyi_3" has been created
NOTICE:  VLabel "ERVertex" has been created
NOTICE:  ELabel "ER_EDGE" has been created
 age_create_erdos_renyi_graph_gnp 
----------------------------------
 
(1 row)

SELECT count(*) FROM "ErdosRenyi_3"."ER_EDGE"; -- All edges are created (30).
 count 
-------
    30
(1 row)

-- Should throw errors.
SELECT * FROM age_create_erdos_renyi_graph_gnp(NULL, NULL, NULL, NULL, NULL, NULL); -- Graph name cannot be NULL.
ERROR:  Graph name cannot be NULL
SELECT * FROM age_create_erdos_renyi_graph_gnp('ErdosRenyi_Error', NULL, NULL, NULL, NULL, NULL); -- Number of vertices cannot be NULL.
NOTICE:  graph "ErdosRenyi_Error" has been created
ERROR:  Number of vertices cannot be NULL.
SELECT * FROM age_create_erdos_renyi_graph_gnp('ErdosRenyi_Error', 6, NULL, NULL, NULL, NULL); -- Probability cannot be NULL.
NOTICE:  graph "ErdosRenyi_Error" has been created
ERROR:  Probability cannot be NULL.
-- G(n,m) model.
-- Unidirectional.
SELECT * FROM age_create_erdos_renyi_graph_gnm('ErdosRenyi_4', 7, 10, 'ERVertex', 'ER_EDGE', false);
NOTICE:  graph "ErdosRenyi_4" has been created
NOTICE:  VLabel "ERVertex" has been created
NOTICE:  ELabel "ER_EDGE" has been created
 age_create_erdos_renyi_graph_gnm 
----------------------------------
 
(1 row)

SELECT * FROM age_create_erdos_renyi_graph_gnm('ErdosRenyi_5', 100, 25, 'ERVertex', 'ER_EDGE', false);
NOTICE:  graph "ErdosRenyi_5" has been created
NOTICE:  VLabel "ERVertex" has been created
NOTICE:  ELabel "ER_EDGE" has been created
 age_create_erdos_renyi_graph_gnm 
----------------------------------
 
(1 row)

SELECT count(*) FROM "ErdosRenyi_4"."ERVertex"; -- Should return 7 vertices.
 count 
-------
     7
(1 row)

SELECT count(*) FROM "ErdosRenyi_4"."ER_EDGE"; -- Should return 10 edges.
 count 
-------
    10
(1 row)

SELECT count(*) FROM "ErdosRenyi_5"."ERVertex"; -- Should return 100 vertices.
 count 
-------
   100
(1 row)

SELECT count(*) FROM "ErdosRenyi_5"."ER_EDGE"; -- Should return 25 edges.
 count 
-------
    25
(1 row)

-- Bidirectional.
SELECT * FROM age_create_erdos_renyi_graph_gnm('ErdosRenyi_6', 7, 10, 'ERVertex', 'ER_EDGE', true);
NOTICE:  graph "ErdosRenyi_6" has been created
NOTICE:  VLabel "ERVertex" has been created
NOTICE:  ELabel "ER_EDGE" has been created
 age_create_erdos_renyi_graph_gnm 
----------------------------------
 
(1 row)

SELECT * FROM age_create_erdos_renyi_graph_gnm('ErdosRenyi_7', 100, 25, 'ERVertex', 'ER_EDGE', true);
NOTICE:  graph "ErdosRenyi_7" has been created
NOTICE:  VLabel "ERVertex" has been created
NOTICE:  ELabel "ER_EDGE" has been created
 age_create_erdos_renyi_graph_gnm 
----------------------------------
 
(1 row)

SELECT count(*) FROM "ErdosRenyi_6"."ERVertex"; -- Should return 7 vertices.
 count 
-------
     7
(1 row)

SELECT count(*) FROM "ErdosRenyi_6"."ER_EDGE"; -- Should return 20 edges.
 count 
-------
    20
(1 row)

SELECT count(*) FROM "ErdosRenyi_7"."ERVertex"; -- Should return 100 vertices.
 count 
-------
   100
(1 row)

SELECT count(*) FROM "ErdosRenyi_7"."ER_EDGE"; -- Should return 50 edges.
 count 
-------
    50
(1 row)

-- Should throw errors.
SELECT * FROM age_create_erdos_renyi_graph_gnm(NULL, NULL, NULL, NULL, NULL, NULL); -- Graph name cannot be NULL.
ERROR:  Graph name cannot be NULL
SELECT * FROM age_create_erdos_renyi_graph_gnm('ErdosRenyi_Error', NULL, NULL, NULL, NULL, NULL); -- Number of vertices cannot be NULL.
NOTICE:  graph "ErdosRenyi_Error" has been created
ERROR:  Number of vertices cannot be NULL.
SELECT * FROM age_create_erdos_renyi_graph_gnm('ErdosRenyi_Error', 100, NULL, NULL, NULL, NULL); -- Number of edges cannot be NULL.
NOTICE:  graph "ErdosRenyi_Error" has been created
ERROR:  Probability cannot be NULL.
-- Drop Erdos-Renyi Graphs.
SELECT drop_graph('ErdosRenyi_1', true);
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table "ErdosRenyi_1"._ag_label_vertex
drop cascades to table "ErdosRenyi_1"._ag_label_edge
drop cascades to table "ErdosRenyi_1"."ERVertex"
drop cascades to table "ErdosRenyi_1"."ER_EDGE"
NOTICE:  graph "ErdosRenyi_1" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT drop_graph('ErdosRenyi_2', true);
ERROR:  graph "ErdosRenyi_2" does not exist
SELECT drop_graph('ErdosRenyi_3', true);
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table "ErdosRenyi_3"._ag_label_vertex
drop cascades to table "ErdosRenyi_3"._ag_label_edge
drop cascades to table "ErdosRenyi_3"."ERVertex"
drop cascades to table "ErdosRenyi_3"."ER_EDGE"
NOTICE:  graph "ErdosRenyi_3" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT drop_graph('ErdosRenyi_4', true);
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table "ErdosRenyi_4"._ag_label_vertex
drop cascades to table "ErdosRenyi_4"._ag_label_edge
drop cascades to table "ErdosRenyi_4"."ERVertex"
drop cascades to table "ErdosRenyi_4"."ER_EDGE"
NOTICE:  graph "ErdosRenyi_4" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT drop_graph('ErdosRenyi_5', true);
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table "ErdosRenyi_5"._ag_label_vertex
drop cascades to table "ErdosRenyi_5"._ag_label_edge
drop cascades to table "ErdosRenyi_5"."ERVertex"
drop cascades to table "ErdosRenyi_5"."ER_EDGE"
NOTICE:  graph "ErdosRenyi_5" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT drop_graph('ErdosRenyi_6', true);
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table "ErdosRenyi_6"._ag_label_vertex
drop cascades to table "ErdosRenyi_6"._ag_label_edge
drop cascades to table "ErdosRenyi_6"."ERVertex"
drop cascades to table "ErdosRenyi_6"."ER_EDGE"
NOTICE:  graph "ErdosRenyi_6" has been dropped
 drop_graph 
------------
 
(1 row)

SELECT drop_graph('ErdosRenyi_7', true);
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table "ErdosRenyi_7"._ag_label_vertex
drop cascades to table "ErdosRenyi_7"._ag_label_edge
drop cascades to table "ErdosRenyi_7"."ERVertex"
drop cascades to table "ErdosRenyi_7"."ER_EDGE"
NOTICE:  graph "ErdosRenyi_7" has been dropped
 drop_graph 
------------
 
(1 row)

